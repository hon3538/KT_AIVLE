'''
철수는 조카가 어떤 세 막대를 선택해도 삼각형을 만들 수 있도록 0개 이상의 막대를 버리려고 합니다.

예를 들어 N = 5, 각 막대의 길이가 1, 3, 2, 4, 3이라고 가정하겠습니다. 
조카가 1번, 2번, 4번 막대를 선택할 경우, a_1 + a_2 = a_4가 되어 삼각형을 만들 수 없습니다. 1번 막대를 버리고 나면, 2번 ~ 4번 막대 중 어떤 세 막대를 선택해도 삼각형을 만들 수 있습니다.

철수는 가능한 많은 막대를 남기고 싶습니다. 
철수가 남길 수 있는 막대의 최대 개수를 구하는 프로그램을 작성하세요.

[입력]
첫째 줄에 막대의 개수 N이 주어집니다. (3 ≤ N ≤ 100)
둘째 줄에 i번 막대의 길이 a_i가 공백으로 구분되어 주어집니다. a_i는 정수입니다. (1 ≤ a_i ≤ 1,000,000)
반드시 1개 이상의 삼각형을 만들 수 있는 입력만 주어집니다.

[출력]
첫째 줄에 남길 수 있는 막대의 최대 개수를 출력합니다.

[설계]
막대길이를 오름차순 정렬하고, 앞에서부터 두 개의 막대 합보다 긴 막대 개수를 구한다.
두 개의 합보다 작은 막대 수와 긴 막대 수를 비교하여 더 적게 버리는 방법을 택한다.
-> 안 되는 경우가 더 많아도, 그 중에서 또 나뉠 수 있다..

sliding window 기법으로 사이즈를 그대로 검사하고
처음 두 개와 끝에 한 개를 비교해서 해당 개수가 가능 한 지 알 수 있다.

size = 3 부터 하나씩 올라가서 sliding window 시도
size 바꾸는 횟수 97 * sliding 횟수 최대 100 == 1만

[최적화]
-> two pointer 로 size를 가변하면서 진행
'''
N = int(input())  # 총 막대 개수
sticks = list(map(int, input().split()))

sticks = sorted(sticks)

ans = 0
head = 0 
end = 1
while end != N-1:
    end += 1
    if sticks[head] + sticks[head+1] > sticks[end]:
        continue
    head += 1
    
size = end - head + 1
print(size)
    
    