'''
1과 자기 자신으로만 나누어떨어지는 2 이상의 수를 소수라고 부른다는 사실은 널리 알려져 있습니다. 
여기서 확장해서 1과 자기 자신과 서로 다른 두 개의 소수로만 나누어떨어지는 수를 유사 소수라고 부르기로 합시다. 
유사 소수의 예시로는 2 × 3 = 6, 3 × 7 = 21 등이 있습니다.

유사 소수에 관련된 흥미로운 문제가 있습니다. 임의의 자연수 N에 대해서 N을 4개의 서로 다른 수의 합으로 표현할 때, 
그 4개의 수 중 3개 이상이 유사 소수가 되게 할 수 있는지에 대한 문제입니다. 
만약 N에 대해 이것이 가능하다면, 우리는 그 N을 유사 소수 분할이 가능하다고 표현합니다.

예를 들어, N = 62일 때는 N을 5 + 10 + 14 + 33와 같이 분할했을 때 3개의 유사 소수를 포함하게 할 수 있으므로 62는 유사 소수 분할이 가능합니다. 
반면, N = 15일 때는 어떻게 해도 3개 이상의 유사 소수를 포함하도록 분할할 수 없으므로 유사 소수 분할이 불가능합니다.

N의 값이 주어졌을 때, N이 유사 소수 분할이 가능한 수인지 구하는 프로그램을 작성하세요.

[입력]
자연수 N이 주어집니다.

[출력]
N이 유사 소수 분할이 가능한 수라면 possible, 아니면 impossible을 출력합니다.
답은 무조건 소문자로만 출력해야 함에 유의하세요.
'''
'''
[설계]
소수끼리의 곱의 결과가 유사 소수이다.
소수 list를 만들고 그로 인한 유사소수 list를 만든다.

유사소수를 3개를 포함하여 덧셈 구조로 만들 수 있는가는 
유사소수 3개를 더한 값 + 1 의 자연수는 모두 유사소수 분할이 가능하다는 의미이다.

소수 2, 3, 5, 7
유사소수 6, 10, 14, 15 .. 즉 31 이상의 수는 유사소수 분할이 가능하다.
'''
N = int(input())
if N < 31:
    print('impossible')
else:
    print('possible')
