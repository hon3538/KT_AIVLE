'''
1. 만약 해당 정수가 2로 나누어 떨어진다면, 2로 나눈다.
2. 만약 해당 정수가 3으로 나누어 떨어진다면, 3으로 나눈 뒤 2를 곱한다.
3. 만약 해당 정수가 5로 나누어 떨어진다면, 5로 나눈 뒤 4를 곱한다.

예를 들어, 30에 첫 번째 지팡이를 사용하면 15가 되고, 두 번째 지팡이를 사용하면 20이 되고, 세 번째 지팡이를 사용하면 24가 됩니다.

미미는 이 마법의 지팡이를 이용하여 어떤 양의 정수를 1로 만들고 싶습니다. 이때, 지팡이를 가능한 한 최소한의 횟수만큼 사용하고 싶습니다. 
양의 정수가 하나 주어질 때, 이 정수를 1로 만드는 데 필요한 최소 지팡이 사용 횟수를 구하는 프로그램을 작성하세요.

[입력]
1로 만들고 싶은 양의 정수 N이 주어집니다. (1 ≤ N ≤ 1,000,000,000)

[출력]
N을 1로 만드는 데 필요한 최소 지팡이 사용 횟수를 출력합니다. 만약 불가능하다면 -1을 출력합니다.
'''
'''
[설계]
1번이 가장 적게 사용하는 경우이다. greedy로 1->2->3 번순서로 가능여부를 따져가며 연산하고 3번까지도 안 되는 경우는 -1이다
-> 장담할 수 있나?
-> 가장 수를 많이 줄이긴 하지만, 나눠지지 않는 경우가 발생할 수도 있다. -> 나눠지지 않는 경우 어떤 경우?
-> dfs로 하면 깊이는 50~100까지 들어갈 수도 있지만
-> backtrack하면 가능성 있다.
-> 실패

-> greedy 사용시에 불가능한 경우 있나?
-> 못찾음
-> 성공
'''

min_level = 0x7fffffff

N = int(input())
ans = 0 
while N != 1:
    ans += 1
    if N%2 == 0:
        N /= 2
        continue

    if N%3 == 0:
        N = (N/3)*2
        continue

    if N%5 == 0:
        N = (N/5)*4
        continue

    ans = -1
    break

print(ans)